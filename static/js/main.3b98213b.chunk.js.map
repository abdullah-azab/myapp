{"version":3,"sources":["app/logo.svg","services/http-sevice.js","services/notification-service.js","services/data-service.js","product/product.js","product-condensed/product-condensed.js","wishlist/wishlist.js","fire-base/firebase.js","services/firebase-http-service.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","HttpService","getProducts","Promise","resolve","reject","fetch","then","res","json","instance","observers","NotificationService","postNotification","notifName","data","obs","x","length","callBack","addObserver","observer","obj","push","removeObserver","splice","this","ns","wishList","DataService","itemOnWishList","item","_id","addWishListItem","removeWishListItem","ds","Product","props","onButtonClicked","state","onWishList","product","bind","onWishListChanged","newWishList","setState","btnClass","className","src","imgUrl","alt","title","price","href","onClick","Component","ProductCondensed","removeProduct","WishList","createWishList","map","key","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FirebaseHttpService","a","async","db","firestore","collection","get","products","docs","doc","fetchData","fb_http","App","loadData","self","err","productList","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b98213b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import  'whatwg-fetch';\r\n\r\n\r\nclass HttpService{\r\n    getProducts = () => {\r\n        var promise =new Promise((resolve, reject) =>{\r\n\r\n            fetch('http://localhost:3004/product')\r\n                .then(res =>{\r\n                  resolve(res.json());\r\n                })\r\n\r\n        });\r\n\r\n        return promise;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default HttpService;","\r\n\r\n//global constants\r\nexport const NOTIF_WISHLIST_CHANGED=\"notif_wishlist_changed\";\r\n\r\n//singleton\r\nlet instance =null;\r\n//observer\r\nvar observers={};\r\n\r\nclass NotificationService {\r\n    constructor() {\r\n        if(!instance){\r\n            instance=this;\r\n        }\r\n        return  instance;\r\n    }\r\n\r\n    postNotification = (notifName,data)=>{\r\n    let obs = observers[notifName];\r\n    for(var x = 0; x < obs.length ; x++){\r\n        var obj = obs[x];\r\n        obj.callBack(data);\r\n    }\r\n    }\r\n\r\n    addObserver =(notifName ,observer ,callBack)=>{\r\n        let obs = observers[notifName];\r\n\r\n        if(!obs){\r\n            observers[notifName]=[];\r\n        }\r\n\r\n        let obj = {observer:observer,callBack:callBack};\r\n        observers[notifName].push(obj);\r\n    }\r\n\r\n    removeObserver=(observer,notifName)=>{\r\n    var obs=observers[notifName];\r\n\r\n    if(obs){\r\n        for(var x=0;x<obs.length;x++){\r\n            if(observer === obs[x].observer){ //make sure its the same object\r\n                obs.splice(x,1);\r\n                observers[notifName]=obs;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n}\r\nexport default NotificationService;","\r\nimport NotificationService,{NOTIF_WISHLIST_CHANGED} from \"./notification-service\";\r\n\r\n//despite new keyword we are still referring to the one singleton object\r\nlet ns=new NotificationService();\r\n// to make it a Singleton class\r\nlet instance = null;\r\n\r\nvar wishList=[];\r\n\r\nclass DataService {\r\n\r\n    constructor() {\r\n        if(! instance){\r\n            instance=this;\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    itemOnWishList=item=>{\r\n        for(var x=0;x<wishList.length;x++){\r\n            if (wishList[x]._id===item._id){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addWishListItem =item =>{\r\n        wishList.push(item);\r\n        //Post notification\r\n        ns.postNotification(NOTIF_WISHLIST_CHANGED,wishList);\r\n    }\r\n\r\n\r\n    removeWishListItem =item =>{\r\n        for(var x=0; x<wishList.length;x++){\r\n            if(wishList[x]._id===item._id){\r\n                wishList.splice(x,1);  //remove one instance from index x\r\n                //Post notification\r\n                ns.postNotification(NOTIF_WISHLIST_CHANGED,wishList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nexport default DataService;","import React,{Component} from 'react';\r\nimport './product.css';\r\nimport DataService from \"../services/data-service\";\r\nimport NotificationService ,{NOTIF_WISHLIST_CHANGED} from \"../services/notification-service\";\r\n\r\nlet ds =new DataService();\r\nlet ns=new NotificationService();\r\n\r\nclass Product extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={onWishList:ds.itemOnWishList()}\r\n        //bind functions\r\n        this.onButtonClicked=this.onButtonClicked.bind(this);\r\n        this.onWishListChanged=this.onWishListChanged.bind(this);\r\n    }\r\n\r\n\r\n    onButtonClicked = ( ) => {\r\n    if (this.state.onWishList){\r\n        ds.removeWishListItem(this.props.product);\r\n    }else {\r\n        ds.addWishListItem(this.props.product);\r\n\r\n    }\r\n    }\r\n\r\n    componentDidMount() {\r\n        ns.addObserver(NOTIF_WISHLIST_CHANGED,this,this.onWishListChanged);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        ns.removeObserver(this , NOTIF_WISHLIST_CHANGED);\r\n    }\r\n\r\n    onWishListChanged(newWishList){\r\n        this.setState({onWishList: ds.itemOnWishList(this.props.product)})\r\n    }\r\n\r\n    render() {\r\n        var btnClass;\r\n        if(this.state.onWishList){\r\n            btnClass=\"btn btn-danger\";\r\n        }else {\r\n            btnClass=\"btn btn-primary\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"card product\">\r\n                <img className=\"card-img-top\" src={this.props.product.imgUrl} alt=\"Product\"></img>\r\n                <div className=\"card-block\">\r\n                    <h4 className=\"card-title\">{this.props.product.title}</h4>\r\n                    <p className=\"card-text\">price:{this.props.product.price} $</p>\r\n                    <a href=\"#top\" onClick={() => this.onButtonClicked()} className={btnClass}>{this.state.onWishList ? \"Remove From Wishlist\" :\"Add to Cart\" } </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default Product;","import React,{Component} from 'react';\r\nimport './product-condensed.css';\r\nimport DataService from \"../services/data-service\";\r\n\r\nlet ds=new DataService();\r\n\r\nclass ProductCondensed extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        this.removeProduct=this.removeProduct.bind(this);\r\n\r\n    }\r\n\r\n    removeProduct=()=>{\r\n        ds.removeWishListItem(this.props.product)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n           <li className=\"list-group-item pc-condensed\">\r\n               <a href=\"#top\" className=\"btn btn-outline-danger\" onClick={()=>this.removeProduct()}>X</a>\r\n               <p>\r\n                   {this.props.product.title} | <b>${this.props.product.price}</b>\r\n               </p>\r\n           </li>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default ProductCondensed;","import React,{Component} from 'react';\r\nimport './wishlist.css';\r\n\r\nimport ProductCondensed from \"../product-condensed/product-condensed\";\r\nimport DataService from \"../services/data-service\";\r\nimport NotificationService,{NOTIF_WISHLIST_CHANGED} from \"../services/notification-service\";\r\n\r\nlet ns =new NotificationService();\r\n\r\nclass WishList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state={wishList:[]};\r\n\r\n\r\n        //Bind functions\r\n        this.createWishList = this.createWishList.bind(this);\r\n        this.onWishListChanged=this.onWishListChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n    ns.addObserver(NOTIF_WISHLIST_CHANGED,this,this.onWishListChanged);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        ns.removeObserver(this , NOTIF_WISHLIST_CHANGED);\r\n    }\r\n\r\n\r\n    onWishListChanged(newWishList){\r\n        this.setState({wishList: newWishList});\r\n    }\r\n\r\n    createWishList = ( ) =>{\r\n        const list =this.state.wishList.map((product) =>\r\n        <ProductCondensed product={product} key={product._id} />\r\n        );\r\n        return(list);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"card-block\">\r\n                    <h4 className=\"card-title\">wish list</h4>\r\n                    <ul className=\"list-group\">\r\n                        {this.createWishList()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default WishList;","import firebase from 'firebase';\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst config = {\r\n        apiKey: \"AIzaSyDU1r9frSeyL-Qn5-jEfY6OSK-dAW6jDBo\",\r\n        authDomain: \"test-proj-4a7ea.firebaseapp.com\",\r\n        databaseURL: \"https://test-proj-4a7ea.firebaseio.com\",\r\n        projectId: \"test-proj-4a7ea\",\r\n        storageBucket: \"test-proj-4a7ea.appspot.com\",\r\n        messagingSenderId: \"621961134897\",\r\n        appId: \"1:621961134897:web:41146a7a289d17feefe610\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n\r\n","import firebase from \"../fire-base/firebase\";\r\nclass FirebaseHttpService{\r\n\r\n    getProducts = () => {\r\n        const fetchData = async () => {\r\n            const db = firebase.firestore();\r\n            const data = await db.collection(\"products\").get();\r\n            const products = data.docs.map(doc => doc.data());\r\n            return products;\r\n        };\r\n        return fetchData();\r\n    }\r\n\r\n}\r\n\r\nexport default FirebaseHttpService;","import React ,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//components\nimport HttpService from \"../services/http-sevice\";\nimport Product from \"../product/product\";\nimport WishList from \"../wishlist/wishlist\";\nimport FirebaseHttpService from \"../services/firebase-http-service\";\n\n\nconst http =new HttpService();\nconst fb_http = new FirebaseHttpService();\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state={products:[]};\n\n        //bind functions\n        this.loadData=this.loadData.bind(this);\n        this.productList=this.productList.bind(this);\n\n        this.loadData();\n\n\n    }\n\n    loadData = ()=>{\n        var self = this;\n        fb_http.getProducts().then(data => {\n             self.setState({products:data})\n        }, err => {\n\n        });\n    }\n\n    productList = () => {\n        const list = this.state.products.map((product) =>\n                <div className=\"col-sm-4\" key={product._id}>\n                    <Product product={product} />\n                </div>\n\n        );\n        return(list);\n    }\n\n\nrender(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Hello world.\n        </p>\n      </header>\n\n        <div className=\"container-fluid App-main \">\n            <div className=\"row\">\n\n                <div className=\"col-sm-8\">\n                    <div className=\"row\">\n                        {this.productList()}\n                    </div>\n                </div>\n\n                <div className=\"col-sm-4\">\n                    <WishList />\n                </div>\n\n            </div>\n        </div>\n    </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}